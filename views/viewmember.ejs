<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Defence Housing Soceity</title>
    <link rel="icon" href="/img/logo200.png" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
    <style>
      /* Your provided CSS styles */
      /* ... */
      /* Add your table styles below */

      /* Responsive Table */
      .responsive-table-container {
        /* margin-top: 85px; */
        /* Adjust margin to clear the navbar */
        transition: margin-left 0.5s ease;
        /* Add transition for smooth adjustment */
        overflow-x: auto;
        /* Enable horizontal scrolling if needed */
        margin-left: 22rem;
        padding: 61px 20px 30px 0px;
      }

      .responsive-table {
        width: 110%;
        border-collapse: collapse;
        /* margin-top: 61px; */
        /* margin-left: 1px; */
        /* margin-bottom: 2rem; */
      }

      .responsive-table th,
      .responsive-table td {
        padding: 12px;
        border: 1px solid #ddd;
      }

      .responsive-table th {
        background-color: #f0f0f0;
        font-weight: bold;
        text-align: left;
      }

      .responsive-table tbody tr:nth-child(even) {
        background-color: #f9f9f9;
      }

      .responsive-table tbody tr:hover {
        background-color: #e0e0e0;
      }

      /* Adjust table cell padding for responsiveness */
      @media (max-width: 768px) {
        .responsive-table th,
        .responsive-table td {
          padding: 8px;
        }
      }
    </style>
  </head>

  <body>
    <!-- Sidebar -->
    <%- include('partials/navbar') %>
    <!-- Sidebar content -->

    <!-- <div id="searchContainer">
      <input type="text" id="searchInput" placeholder="Search...">
      <button id="searchButton"  class="btn btn-info">Search</button>
    </div> -->
    <div id="searchContainer" class="d-flex align-items-center">
      <input
        class="form-control me-2"
        type="search"
        placeholder="Search"
        aria-label="Search"
        id="searchInput"
        style="width: 25%"
      />
      <!-- <button class="btn btn-outline-primary" type="submit" id="searchButton">
        Search
      </button> -->
      <p style="color: green; margin-left: 10px; margin-bottom: 0">
        * search here on username,email or seniority id
      </p>
    </div>

    <!-- Main Content -->
    <div id="content" class="responsive-table-container">
      <table class="responsive-table">
        <thead>
          <tr>
            <th>S.No</th>
            <th>Member Name</th>
            <th>Mobile No</th>
            <th>Email</th>
            <th>Seniority ID</th>
            <th>Password</th>
            <th>Status</th>
            <th>Send email</th>

            <!-- Add more columns as needed -->
          </tr>
        </thead>
        <tbody id="tableBody">
          <!-- Table rows will be dynamically populated -->
        </tbody>
      </table>
    </div>
    <div id="pagination" class="pagination"></div>

    <script src="/js/script.js"></script>
    <script>
      //     document.addEventListener('DOMContentLoaded', () => {
      //       const pageSize = 10; // Number of rows per page
      //         let currentPage = 1;
      //         let data = []; // Array to store all data
      //       fetch('/users/membdetails')
      //         .then(response => response.json())
      //         .then(apiData => {
      //           data = apiData
      //           renderTable();

      //         })
      //         .catch(error => {
      //           console.error('Error fetching data:', error);
      //         });

      //         function renderTable(){

      // const startIndex = (currentPage - 1) * pageSize;
      //         const endIndex = startIndex + pageSize;
      //         const paginatedData = data.slice(startIndex, endIndex);
      //         const tableBody = document.getElementById('tableBody');
      //         tableBody.innerHTML = ''; // Clear existing rows

      //         if (!Array.isArray(paginatedData)) {
      // throw new Error('Data is not in the expected format');
      // }

      // paginatedData.forEach((item, index) => {
      // const row = `
      //                 <tr>
      //                     <td>${index + 1}</td>
      //                     <td>${item.username}</td>
      //                     <td>${item.user_mobile}</td>
      //                     <td>${item.user_email}</td>
      //                     <td>${item.user_seniority_id}</td>
      //                     <td>${item.user_epwd}</td>
      //                     <td>${item.user_status_display}</td>
      //                 </tr>
      //             `;

      // tableBody.innerHTML += row;
      // });

      // renderPagination();

      // }

      // function renderPagination() {
      //   const totalPages = Math.ceil(data.length / pageSize);
      //   const paginationElement = document.getElementById('pagination');
      //   paginationElement.innerHTML = '';

      //   // Check if pagination is needed (totalPages > 1)
      //   if (totalPages > 1) {
      //       // Determine the range of pages to display
      //       const numPagesToShow = 5; // Adjust this number as needed
      //       let startPage = Math.max(1, currentPage - Math.floor(numPagesToShow / 2));
      //       let endPage = Math.min(totalPages, startPage + numPagesToShow - 1);

      //       // Adjust startPage and endPage if necessary to ensure we have numPagesToShow pages
      //       if (endPage - startPage + 1 < numPagesToShow) {
      //           startPage = Math.max(1, endPage - numPagesToShow + 1);
      //       }

      //       // Render previous button
      //       if (currentPage > 1) {
      //           renderPaginationButton('«', currentPage - 1);
      //       }

      //       // Render page numbers
      //       for (let i = startPage; i <= endPage; i++) {
      //           if (i === currentPage) {
      //               renderPaginationButton(`<b>${i}</b>`, i);
      //           } else {
      //               renderPaginationButton(i, i);
      //           }
      //       }

      //       // Render next button
      //       if (currentPage < totalPages) {
      //           renderPaginationButton('»', currentPage + 1);
      //       }
      //   }
      // }

      // // Function to render a pagination button
      //       function renderPaginationButton(label, page) {
      //   const paginationElement = document.getElementById('pagination');
      //   const pageLink = document.createElement('a');
      //   pageLink.href = '#';
      //   pageLink.innerHTML = label;
      //   pageLink.addEventListener('click', () => {
      //       currentPage = page;
      //       renderTable();
      //   });
      //   paginationElement.appendChild(pageLink);
      // }

      //     });

      document.addEventListener("DOMContentLoaded", () => {
        const pageSize = 10; // Number of rows per page
        let currentPage = 1;
        let data = []; // Array to store all data

        fetch("/users/membdetails")
          .then((response) => response.json())
          .then((apiData) => {
            console.log(apiData); // Log the API data for inspection
            if (!Array.isArray(apiData.result)) {
              throw new Error("API data is not in the expected format");
            }
            data = apiData.result; // Assuming apiData has a result property containing the array
            renderTable();
          })
          .catch((error) => {
            console.error("Error fetching data:", error);
          });

        function renderTable() {
          const startIndex = (currentPage - 1) * pageSize;
          const endIndex = startIndex + pageSize;
          const paginatedData = data.slice(startIndex, endIndex);
          const tableBody = document.getElementById("tableBody");
          tableBody.innerHTML = ""; // Clear existing rows

          paginatedData.forEach((item, index) => {
            const row = `
                <tr>
                    <td>${startIndex + index + 1}</td>
                    <td>${item.username}</td>
                    <td>${item.user_mobile}</td>
                    <td>${item.user_email}</td>
                    <td>${item.user_seniority_id}</td>
                    <td>${item.user_epwd}</td>
                    <td>${item.user_status_display}</td>
                    <td>
                       <button type="button" class="btn btn-primary" onclick="handleSendEmail('${
                         item.username
                       }','${item.user_email}', '${item.user_seniority_id}','${
              item.user_epwd
            }')">Send Email</button>
                    </td>
                </tr>
            `;
            tableBody.insertAdjacentHTML("beforeend", row);
          });

          renderPagination();
        }

        function renderPagination() {
          const totalPages = Math.ceil(data.length / pageSize);
          const paginationElement = document.getElementById("pagination");
          paginationElement.innerHTML = "";

          // Check if pagination is needed (totalPages > 1)
          if (totalPages > 1) {
            // Determine the range of pages to display
            const numPagesToShow = 5; // Adjust this number as needed
            let startPage = Math.max(
              1,
              currentPage - Math.floor(numPagesToShow / 2)
            );
            let endPage = Math.min(totalPages, startPage + numPagesToShow - 1);

            // Adjust startPage and endPage if necessary to ensure we have numPagesToShow pages
            if (endPage - startPage + 1 < numPagesToShow) {
              startPage = Math.max(1, endPage - numPagesToShow + 1);
            }

            // Render previous button
            if (currentPage > 1) {
              renderPaginationButton("«", currentPage - 1);
            }

            // Render page numbers
            for (let i = startPage; i <= endPage; i++) {
              if (i === currentPage) {
                renderPaginationButton(`<b>${i}</b>`, i);
              } else {
                renderPaginationButton(i, i);
              }
            }

            // Render next button
            if (currentPage < totalPages) {
              renderPaginationButton("»", currentPage + 1);
            }
          }
        }

        // Function to render a pagination button
        function renderPaginationButton(label, page) {
          const paginationElement = document.getElementById("pagination");
          const pageLink = document.createElement("a");
          pageLink.href = "#";
          pageLink.innerHTML = label;
          pageLink.addEventListener("click", () => {
            currentPage = page;
            renderTable();
          });
          paginationElement.appendChild(pageLink);
        }

        // function handleSearch() {
        //   const searchInput = document
        //     .getElementById("searchInput")
        //     .value.trim()
        //     .toLowerCase();
        //   const filteredData = data.filter((user) => {
        //     return user.username.toLowerCase().includes(searchInput);
        //   });
        //   renderFilteredTable(filteredData);
        // }

        function handleSearch() {
          const searchInput = document
            .getElementById("searchInput")
            .value.trim()
            .toLowerCase();

          if (searchInput === "") {
            renderTable();
          } else {
            const filteredData = data.filter((user) => {
              return (
                user.username.toLowerCase().includes(searchInput) ||
                user.user_email.toLowerCase().includes(searchInput) ||
                user.user_seniority_id.toLowerCase().includes(searchInput) // Fixed key name
              );
            });
            renderFilteredTable(filteredData);
          }
        }

        // Function to render filtered table
        // Global variable to track the overall index
        // let overallIndex = 0;

        function renderFilteredTable(filteredData) {
          const tableBody = document.getElementById("tableBody");
          tableBody.innerHTML = ""; // Clear existing rows
          // Calculate the index of the first item on the current page
          const startIndex = (currentPage - 1) * pageSize;
          console.log(startIndex);
          // Reset overall index based on the start index of the current page
          overallIndex = startIndex;

          filteredData.forEach((item) => {
            const row = document.createElement("tr");

            // Populate table cells with filtered user data
            row.innerHTML = `
      <td>${overallIndex + 1}</td>
      <td>${item.username}</td>
                    <td>${item.user_mobile}</td>
                    <td>${item.user_email}</td>
                    <td>${item.user_seniority_id}</td>
                    <td>${item.user_epwd}</td>
                    <td>${item.user_status_display}</td>
                   <td>
                       <button type="button" class="btn btn-primary" onclick="handleSendEmail('${
                         item.username
                       }','${item.user_email}', '${item.user_seniority_id}','${
              item.user_epwd
            }')">Send Email</button>
                    </td>
    `;

            // Append the row to the table body
            tableBody.appendChild(row);

            // Increment overall index
            overallIndex++;
          });
        }

        // Event listener for search button click
        //   document
        //     .getElementById("searchButton")
        //     .addEventListener("click", handleSearch);
        // });
        document
          .getElementById("searchInput")
          .addEventListener("input", handleSearch);
      });

      async function handleSendEmail(username, email, seniorityId, Password) {
        try {
          const response = await fetch("/send-email", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ username, email, seniorityId, Password }),
          });

          const result = await response.json();
          if (response.ok) {
            alert(result.message); // Email sent successfully
          } else {
            alert("Failed to send email: " + result.message);
          }
        } catch (error) {
          console.error("Error:", error);
          alert("An error occurred while sending the email.");
        }
      }
    </script>
  </body>
</html>
