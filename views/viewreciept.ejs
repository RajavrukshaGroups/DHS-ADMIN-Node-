<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Responsive Table with Sidebar</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />

    <style>
      /* Your provided CSS styles */
      /* ... */
      /* Add your table styles below */

      /* Responsive Table */
      .responsive-table-container {
        /* margin-top: 85px; */
        /* Adjust margin to clear the navbar */
        transition: margin-left 0.5s ease;
        /* Add transition for smooth adjustment */
        overflow-x: auto;
        /* Enable horizontal scrolling if needed */
        margin-left: 22rem;
        padding: 61px 20px 30px 0px;
      }

      .responsive-table {
        width: 100%;
        border-collapse: collapse;
        /* margin-top: 61px; */
        /* margin-left: 1px; */
        /* margin-bottom: 2rem; */
      }

      .responsive-table th,
      .responsive-table td {
        padding: 12px;
        border: 1px solid #ddd;
      }

      .responsive-table th {
        background-color: #f0f0f0;
        font-weight: bold;
        text-align: left;
      }

      .responsive-table tbody tr:nth-child(even) {
        background-color: #f9f9f9;
      }

      .responsive-table tbody tr:hover {
        background-color: #e0e0e0;
      }

      /* Adjust table cell padding for responsiveness */
      @media (max-width: 768px) {
        .responsive-table th,
        .responsive-table td {
          padding: 8px;
        }
      }
      
    </style>
  </head>

  <body>
    <!-- Sidebar -->
    <%- include('partials/navbar') %>
    <!-- Sidebar content -->

    <div id="searchContainer" class="d-flex align-items-center">
      <input
        class="form-control me-2"
        type="search"
        placeholder="Search"
        aria-label="Search"
        id="searchInput"
        style="width: 25%"
      />
      <!-- <button class="btn btn-outline-primary" type="submit" id="searchButton">
        Search
      </button> -->
      <p style="color: green; margin-right: 10px; margin-bottom: 0">
        *search here on receipt number,project name or member details
      </p>

      <div class="re-container mt-10 mb-6">
        <div class="wrapper p2 rtop">
            <a style=" color:black; font-weight:900; font-size:19px; position: relative; left:13rem"
                onclick="goBack()" class="back-btn">
                <img style="vertical-align:sub;" src="/img/go-back.png" /> Back
            </a>
            
        </div>
    </div>
    </div>
    <!-- Main Content -->
    <div id="content" class="responsive-table-container">
      <table class="responsive-table">
        <thead>
          <tr>
            <th id="sNo">S.No</th>
            <th id="createdDate">Created Date</th>
            <th id="receiptNumber">Receipt Number</th>
            <th id="memberDetails">Member Details</th>
            <th id="projectName">Project Name</th>
            <th id="totalAmount">Total Amount</th>
            <th id="status">Status</th>
            <th id="action">Action</th>
            <th id="delete">Delete</th>
          </tr>
        </thead>
        <tbody id="tableBody"></tbody>
      </table>
    </div>

    <div id="pagination" class="pagination"></div>

    <script src="/js/script.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        let filteredData = [];
        const pageSize = 10; // Number of rows per page
        let currentPage = 1;
        let data = []; // Array to store all data
        fetch("/receipt/viewerreceipt")
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((apiData) => {
            data = apiData; // Store fetched data
            renderTable(); // Render initial table
          })
          .catch((error) => {
            console.error(
              "There was a problem with the fetch operation:",
              error
            );
          });

        // function renderTable() {
        //   const startIndex = (currentPage - 1) * pageSize;
        //   const endIndex = startIndex + pageSize;
        //   const paginatedData = data.slice(startIndex, endIndex);
        //   const tableBody = document.getElementById("tableBody");
        //   tableBody.innerHTML = ""; // Clear existing rows

        //   paginatedData.forEach((row, index) => {
        //     const newRow = tableBody.insertRow();
        //     const receiptId = row["receipt_id"];
        //     const userAddress = row["Member Address"];

        //     // Fetching user address from the current row
        //     console.log("Receipt ID:", receiptId);
        //     console.log("User Address:", userAddress);
        //     const bankName = row["Bank Name"]; // 'Bank Name' should match the alias in your SQL query
        //     const branchName = row["Branch Name"]; // 'Branch Name' should match the alias in your SQL query

        //     const transactionNo = row["Chequetransdd"]; // Check cheque_no and dd_no

        //     // Fetching user address from the row object

        //     // const user_addresss = tableBody.insertRow();
        //     // const user_address = row['Address'];
        //     // console.log('User Address:', user_address);

        //     const sNoCell = newRow.insertCell(0);
        //     sNoCell.textContent = startIndex + index + 1;

        //     const createdDateCell = newRow.insertCell(1);
        //     createdDateCell.textContent = formatDate(row["Created Date"]);

        //     const receiptNumberCell = newRow.insertCell(2);
        //     receiptNumberCell.textContent = row["Receipt Number"];

        //     const memberDetailsCell = newRow.insertCell(3);
        //     memberDetailsCell.textContent = row["Member Details"];

        //     const projectNameCell = newRow.insertCell(4);
        //     projectNameCell.textContent = row["Project Name"];

        //     const totalAmountCell = newRow.insertCell(5);
        //     totalAmountCell.textContent = `${formatNumber(
        //       row["Total Amount"]
        //     )}/-`;

        //     const statusCell = newRow.insertCell(6);
        //     statusCell.textContent = row["Status"];

        //     const actionCell = newRow.insertCell(7);
        //     const eyeIcon = document.createElement("i");
        //     eyeIcon.className = "fas fa-eye";
        //     eyeIcon.addEventListener("click", () => {
        //       const receiptId = row["receipt_id"];

        //       // Construct the URL with the receipt ID parameter
        //       const recUrl = "/rec?receiptId=" + receiptId;

        //       // Redirect the user to the edit URL
        //       window.location.href = recUrl;
        //     });
        //     actionCell.appendChild(eyeIcon);

        //     const editIcon = document.createElement("i");
        //     editIcon.className = "fas fa-edit";
        //     editIcon.style.cursor = "pointer";
        //     editIcon.title = "Edit";

        //     editIcon.addEventListener("click", function () {
        //       const receiptId = row["receipt_id"];
        //       const editUrl = "/editReciept/" + receiptId;
        //       window.location.href = editUrl;
        //     });
        //     actionCell.appendChild(editIcon);

        //     const deleteCell = newRow.insertCell(8);
        //     const deleteIcon = document.createElement("i");
        //     deleteIcon.className = "fas fa-trash-alt";
        //     // Set the data-receiptid attribute to the receipt ID
        //     deleteIcon.dataset.receiptid = row["receipt_id"];
        //     deleteCell.appendChild(deleteIcon);
        //   });

        //   renderPagination();
        // }

        function renderTable() {
          const dataToRender = filteredData.length > 0 ? filteredData : data; // Use filteredData if it exists

          const startIndex = (currentPage - 1) * pageSize;
          const endIndex = startIndex + pageSize;
          const paginatedData = dataToRender.slice(startIndex, endIndex);

          const tableBody = document.getElementById("tableBody");
          tableBody.innerHTML = ""; // Clear existing rows

          paginatedData.forEach((row, index) => {
            const newRow = tableBody.insertRow();
            const receiptId = row["receipt_id"];

            const sNoCell = newRow.insertCell(0);
            sNoCell.textContent = startIndex + index + 1;

            const createdDateCell = newRow.insertCell(1);
            createdDateCell.textContent = formatDate(row["Created Date"]);

            const receiptNumberCell = newRow.insertCell(2);
            receiptNumberCell.textContent = row["Receipt Number"];

            const memberDetailsCell = newRow.insertCell(3);
            memberDetailsCell.textContent = row["Member Details"];

            const projectNameCell = newRow.insertCell(4);
            projectNameCell.textContent = row["Project Name"];

            const totalAmountCell = newRow.insertCell(5);
            totalAmountCell.textContent = `${formatNumber(
              row["Total Amount"]
            )}/-`;

            const statusCell = newRow.insertCell(6);
            statusCell.textContent = row["Status"];

            const actionCell = newRow.insertCell(7);
            const eyeIcon = document.createElement("i");
            eyeIcon.className = "fas fa-eye";
            eyeIcon.addEventListener("click", () => {
              const recUrl = "/rec?receiptId=" + receiptId;
              window.location.href = recUrl;
            });
            actionCell.appendChild(eyeIcon);

            const deleteCell = newRow.insertCell(8);
            const deleteIcon = document.createElement("i");
            deleteIcon.className = "fas fa-trash-alt";
            deleteIcon.dataset.receiptid = row["receipt_id"];
            deleteCell.appendChild(deleteIcon);
          });

          renderPagination(); // Update pagination
        }

        // function renderPagination() {
        //   const totalPages = Math.ceil(data.length / pageSize);
        //   const paginationElement = document.getElementById("pagination");
        //   paginationElement.innerHTML = "";

        //   // Check if pagination is needed (totalPages > 1)
        //   if (totalPages > 1) {
        //     // Determine the range of pages to display
        //     const numPagesToShow = 3; // Adjust this number as needed
        //     let startPage = Math.max(
        //       1,
        //       currentPage - Math.floor(numPagesToShow / 2)
        //     );
        //     let endPage = Math.min(totalPages, startPage + numPagesToShow - 1);

        //     // Adjust startPage and endPage if necessary to ensure we have numPagesToShow pages
        //     if (endPage - startPage + 1 < numPagesToShow) {
        //       startPage = Math.max(1, endPage - numPagesToShow + 1);
        //     }

        //     // Render previous button
        //     if (currentPage > 1) {
        //       renderPaginationButton("«", currentPage - 1);
        //     }

        //     // Render page numbers
        //     for (let i = startPage; i <= endPage; i++) {
        //       if (i === currentPage) {
        //         renderPaginationButton(`<b>${i}</b>`, i);
        //       } else {
        //         renderPaginationButton(i, i);
        //       }
        //     }

        //     // Render next button
        //     if (currentPage < totalPages) {
        //       renderPaginationButton("»", currentPage + 1);
        //     }
        //   }
        // }

        function renderPagination() {
          const dataToRender = filteredData.length > 0 ? filteredData : data;
          const totalPages = Math.ceil(dataToRender.length / pageSize);
          const paginationElement = document.getElementById("pagination");
          paginationElement.innerHTML = "";

          if (totalPages > 1) {
            if (currentPage > 1) {
              renderPaginationButton("«", currentPage - 1);
            }

            for (let i = 1; i <= totalPages; i++) {
              if (i === currentPage) {
                renderPaginationButton(`<b>${i}</b>`, i);
              } else {
                renderPaginationButton(i, i);
              }
            }

            if (currentPage < totalPages) {
              renderPaginationButton("»", currentPage + 1);
            }
          }
        }

        // Function to render a pagination button
        function renderPaginationButton(label, page) {
          const paginationElement = document.getElementById("pagination");
          const pageLink = document.createElement("a");
          pageLink.href = "#";
          pageLink.innerHTML = label;
          pageLink.addEventListener("click", () => {
            currentPage = page;
            renderTable();
          });
          paginationElement.appendChild(pageLink);
        }

        function handleSearch() {
          const searchInput = document
            .getElementById("searchInput")
            .value.toLowerCase();

          // If the search input is empty, reset to full dataset
          if (!searchInput) {
            filteredData = [...data]; // Reset to original data
          } else {
            filteredData = data.filter((row) => {
              const memberDetails = row["Member Details"]
                ? row["Member Details"].toLowerCase()
                : "";
              const projectName = row["Project Name"]
                ? row["Project Name"].toLowerCase()
                : "";
              const receiptNumber = row["Receipt Number"]
                ? row["Receipt Number"].toLowerCase()
                : "";
              return (
                memberDetails.includes(searchInput) ||
                projectName.includes(searchInput) ||
                receiptNumber.includes(searchInput)
              );
            });
          }

          currentPage = 1; // Reset to the first page
          renderTable(); // Render the filtered results
        }

        function renderFilteredTable(filteredData) {
          const tableBody = document.getElementById("tableBody");
          tableBody.innerHTML = ""; // Clear existing rows

          // Calculate the index of the first item on the current page
          const startIndex = (currentPage - 1) * pageSize;
          console.log(startIndex);

          // Reset overall index based on the start index of the current page
          overallIndex = startIndex;

          filteredData.forEach((row) => {
            const newRow = tableBody.insertRow();
            const receiptId = row["receipt_id"];
            const userAddress = row["Member Address"];
            const bankName = row["Bank Name"]; // 'Bank Name' should match the alias in your SQL query
            const branchName = row["Branch Name"]; // 'Branch Name' should match the alias in your SQL query
            const transactionNo = row["Cheque No"]
              ? row["Cheque No"]
              : row["DD No"]; // Check cheque_no and dd_no

            // Fetching user address from the row object

            const sNoCell = newRow.insertCell(0);
            sNoCell.textContent = overallIndex + 1;

            const createdDateCell = newRow.insertCell(1);
            createdDateCell.textContent = formatDate(row["Created Date"]);

            const receiptNumberCell = newRow.insertCell(2);
            receiptNumberCell.textContent = row["Receipt Number"];

            const memberDetailsCell = newRow.insertCell(3);
            memberDetailsCell.textContent = row["Member Details"];

            const projectNameCell = newRow.insertCell(4);
            projectNameCell.textContent = row["Project Name"];

            const totalAmountCell = newRow.insertCell(5);
            totalAmountCell.textContent = `${formatNumber(
              row["Total Amount"]
            )}/-`;

            const statusCell = newRow.insertCell(6);
            statusCell.textContent = row["Status"];

            const actionCell = newRow.insertCell(7);
            const eyeIcon = document.createElement("i");
            eyeIcon.className = "fas fa-eye";
            eyeIcon.addEventListener("click", () => {
              const receiptId = row["receipt_id"];

              // Construct the URL with the receipt ID parameter
              const recUrl = "/rec?receiptId=" + receiptId;

              // Redirect the user to the edit URL
              window.location.href = recUrl;
            });
            actionCell.appendChild(eyeIcon);

            const editIcon = document.createElement("i");
            editIcon.className = "fas fa-edit";
            editIcon.style.cursor = "pointer";
            editIcon.title = "Edit";

            editIcon.addEventListener("click", function () {
              const receiptId = row["receipt_id"];
              const editUrl = "/editrec?receiptId=" + receiptId;
              // Redirect the user to the edit URL
              window.location.href = editUrl;
            });

            actionCell.appendChild(editIcon);

            const deleteCell = newRow.insertCell(8);
            const deleteIcon = document.createElement("i");
            deleteIcon.className = "fas fa-trash-alt";
            // Set the data-receiptid attribute to the receipt ID
            deleteIcon.dataset.receiptid = row["receipt_id"];
            deleteCell.appendChild(deleteIcon);

            // Increment overall index
            overallIndex++;
          });
        }

        // Event listener for search button click
        document
          .getElementById("searchInput")
          .addEventListener("input", handleSearch);
      });

      document.addEventListener("click", function (event) {
        if (event.target.classList.contains("fa-trash-alt")) {
          // Get the receipt ID from the data-receiptid attribute
          const receiptId = event.target.dataset.receiptid;
          console.log("receipt id in delete", receiptId);

          // Confirm deletion with user
          if (confirm("Are you sure you want to delete this receipt?")) {
            // Make a DELETE request to delete the receipt
            fetch(`/receipt/delete/${receiptId}`, {
              method: "DELETE",
            })
              .then((response) => {
                if (response.ok) {
                  // Remove the corresponding row from the table
                  const row = event.target.closest("tr");
                  row.parentNode.removeChild(row);
                } else {
                  console.error("Failed to delete receipt");
                }
              })
              .catch((error) => {
                console.error("Error deleting receipt:", error);
              });
          }
        }
      });

      function formatDate(dateStr) {
        const date = new Date(dateStr);
        const day = date.getDate().toString().padStart(2, "0"); // Day with leading zero
        const month = (date.getMonth() + 1).toString().padStart(2, "0"); // Month with leading zero (0-based, so +1)
        const year = date.getFullYear(); // Year

        return `${day}-${month}-${year}`; // Format as day-month-year
      }

      const formatNumber = (number) => {
        const formatter = new Intl.NumberFormat("en-IN");
        return formatter.format(number);
      };

      
      function goBack() {
            window.history.back();
        }
    </script>
  </body>
</html>
