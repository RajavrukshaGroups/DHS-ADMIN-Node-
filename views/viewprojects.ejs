<!-- views/home.ejs -->
<!DOCTYPE html>
<!-- Coding by CodingNepal || www.codingnepalweb.com -->
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Boxicons CSS -->
    <link
      href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
      rel="stylesheet"
    />
    <title>Defence Housing Soceity</title>
    <link rel="icon" href="/img/logo200.png" />
    <link rel="stylesheet" href="/css/styles.css" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />

    <style>
      .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }

      .table th,
      .table td {
        padding: 12px;
        border: 1px solid #ddd;
      }

      .table th {
        background-color: #f0f0f0;
        font-weight: bold;
        text-align: left;
      }

      .table tbody tr:nth-child(even) {
        background-color: #f9f9f9;
      }

      .table tbody tr:hover {
        background-color: #e0e0e0;
      }

      .action-icons i {
        cursor: pointer;
        margin-right: 5px;
        color: #333;
        /* Icon color */
      }

      /* Hide the edit form initially */
      #editFormCard {
        display: none;
      }

      /* Media query for responsiveness */
      @media (max-width: 768px) {
        .card {
          padding: 10px;
        }

        .table th,
        .table td {
          padding: 8px;
        }

        .action-icons i {
          font-size: 18px;
        }
      }

      .pagination {
        display: inline-block;
        margin-left: 65rem;
        margin-top: 2rem;
        border: 2px solid transparent;
        box-shadow: 1px 1px 2px 2px;
        background-color: white;
      }

      .pagination a {
        color: black;
        padding: 8px 16px;
        text-decoration: none;
      }

      .pagination a.active {
        background-color: #4caf50;
        color: white;
      }
    </style>
  </head>
  <body>
    <%- include('partials/navbar') %>
    <div id="searchContainer" class="d-flex">
      <input
        class="form-control me-2"
        type="search"
        placeholder="Search"
        aria-label="Search"
        id="searchInput"
        style="width: 25%"
      />
      <button class="btn btn-outline-primary" type="submit" id="searchButton">
        Search
      </button>
    </div>
    <!-- Add your card here -->
    <div id="content">
      <!-- Content Goes Here -->
      <span class="menu-text">Page Title</span>
      <!-- Form Inside Card -->
      <div class="card">
        <table class="table table-bordered">
          <thead>
            <tr>
              <th colspan="5" style="text-align: center">
                Available Land Details
              </th>
            </tr>
            <tr>
              <th>S.No</th>
              <th>Project Name</th>
              <th>Short Code</th>
              <th>Status</th>
              <!-- <th>Action</th> -->
            </tr>
          </thead>
          <tbody id="tableBody"></tbody>
        </table>
      </div>
    </div>

    <div id="pagination" class="pagination"></div>

    <script src="/js/script.js"></script>
    <script>
      const pageSize = 10; // Number of rows per page
      let currentPage = 1;
      let data = []; // Array to store all data
      document.addEventListener("DOMContentLoaded", () => {
        fetch("/project/prodetails")
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((apiData) => {
            data = apiData; // Store fetched data
            renderTable(); // Render initial table
          })
          .catch((error) => {
            console.error(
              "There was a problem with the fetch operation:",
              error
            );
            // Handle error scenarios if required
          });
      });

      function renderTable() {
        const startIndex = (currentPage - 1) * pageSize;
        const endIndex = startIndex + pageSize;
        const paginatedData = data.slice(startIndex, endIndex);
        const tableBody = document.getElementById("tableBody");
        tableBody.innerHTML = "";

        paginatedData.forEach((item, index) => {
          const row = tableBody.insertRow();
          row.insertCell(0).textContent = startIndex + index + 1; // S.No
          row.insertCell(1).textContent = item["pro_name"];
          row.insertCell(2).textContent = item["short_code"];
          // Convert status value to appropriate string
          const statusText =
            item["status"] === 1 ? "Current project" : "Completed project";
          row.insertCell(3).textContent = statusText;

          // Create action-icons div for edit and delete icons
          // const actionCell = row.insertCell(4);
          // const actionIconsDiv = document.createElement('div');
          // actionIconsDiv.className = 'action-icons';

          // Add edit icon
          // const editIcon = document.createElement('i');
          // editIcon.className = 'bx bx-edit';
          // editIcon.addEventListener('click', () => {
          //   // Handle edit action
          //   handleEditClick(index);
          // });
          // actionIconsDiv.appendChild(editIcon);

          // Add delete icon
          // const deleteIcon = document.createElement('i');
          // deleteIcon.className = 'bx bx-trash';
          // deleteIcon.addEventListener('click', () => {
          //   // Handle delete action
          //   console.log('Delete clicked for row:', index + 1);
          // });
          // actionIconsDiv.appendChild(deleteIcon);

          // // Append action-icons div to actionCell
          // actionCell.appendChild(actionIconsDiv);
        });

        renderPagination();
      }

      function renderPagination(filteredData) {
        const totalPages = Math.ceil(filteredData.length / pageSize);
        const paginationElement = document.getElementById("pagination");
        paginationElement.innerHTML = "";

        // Check if pagination is needed (totalPages > 1)
        if (totalPages > 1) {
          // Determine the range of pages to display
          const numPagesToShow = 5; // Adjust this number as needed
          let startPage = Math.max(
            1,
            currentPage - Math.floor(numPagesToShow / 2)
          );
          let endPage = Math.min(totalPages, startPage + numPagesToShow - 1);

          // Adjust startPage and endPage if necessary to ensure we have numPagesToShow pages
          if (endPage - startPage + 1 < numPagesToShow) {
            startPage = Math.max(1, endPage - numPagesToShow + 1);
          }

          // Render previous button
          if (currentPage > 1) {
            renderPaginationButton("«", currentPage - 1,filteredData);
          }

          // Render page numbers
          for (let i = startPage; i <= endPage; i++) {
            if (i === currentPage) {
              renderPaginationButton(`<b>${i}</b>`, i, filteredData);
            } else {
              renderPaginationButton(i, i, filteredData);
            }
          }

          // Render next button
          if (currentPage < totalPages) {
            renderPaginationButton("»", currentPage + 1, filteredData);
          }
        }
      }

      // Function to render a pagination button
      function renderPaginationButton(label, page, filteredData) {
        const paginationElement = document.getElementById("pagination");
        const pageLink = document.createElement("a");
        pageLink.href = "#";
        pageLink.innerHTML = label;
        pageLink.addEventListener("click", () => {
          currentPage = page;
          // renderTable();
          renderFilteredTable(filteredData);
        });
        paginationElement.appendChild(pageLink);
      }

      function handleSearch() {
        const searchInput = document
          .getElementById("searchInput")
          .value.trim().toLowerCase();
        const filteredData = data.filter((item) => {
          // Customize this condition based on your search requirements
          return (
            item["pro_name"].toLowerCase().includes(searchInput) ||
            item["short_code"].toLowerCase().includes(searchInput)
          );
        });
        currentPage = 1;

        renderFilteredTable(filteredData);
      }

      function renderFilteredTable(filteredData) {
        const tableBody = document.getElementById("tableBody");
        tableBody.innerHTML = ""; // Clear existing rows
        // Calculate the index of the first item on the current page
        const startIndex = (currentPage - 1) * pageSize;
        console.log(startIndex);
        // Reset overall index based on the start index of the current page
        overallIndex = startIndex;

        const paginatedData = filteredData.slice(
          startIndex,
          startIndex + pageSize
        );
        paginatedData.forEach((item) => {
          // const row = document.createElement('tr');
          const row = tableBody.insertRow();

          // Populate table cells with filtered user data

          row.insertCell(0).textContent = overallIndex + 1; // S.No
          row.insertCell(1).textContent = item["pro_name"];
          row.insertCell(2).textContent = item["short_code"];
          row.insertCell(3).textContent =
            item["status"] === 1 ? "Current project" : "Completed project";
          // Append the row to the table body
          // tableBody.appendChild(row);

          // Increment overall index
          overallIndex++;
        });
        renderPagination(filteredData);
      }

      // Event listener for search button click
      document
        .getElementById("searchButton")
        .addEventListener("click", handleSearch);
    </script>
  </body>
</html>
