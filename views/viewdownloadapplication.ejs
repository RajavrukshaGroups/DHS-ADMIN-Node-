<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Responsive Table with Sidebar</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <style>
    /* Your provided CSS styles */
    /* ... */
    /* Add your table styles below */

    /* Responsive Table */
    .responsive-table-container {
      /* margin-top: 85px; */
      /* Adjust margin to clear the navbar */
      transition: margin-left 0.5s ease;
      /* Add transition for smooth adjustment */
      overflow-x: auto;
      /* Enable horizontal scrolling if needed */
      margin-left: 22rem;
      padding: 61px 20px 30px 0px;
    }

    .responsive-table {
      width: 110%;
      border-collapse: collapse;
      /* margin-top: 61px; */
      /* margin-left: 1px; */
      /* margin-bottom: 2rem; */
    }

    .responsive-table th,
    .responsive-table td {
      padding: 12px;
      border: 1px solid #ddd;
    }

    .responsive-table th {
      background-color: #f0f0f0;
      font-weight: bold;
      text-align: left;
    }

    .responsive-table tbody tr:nth-child(even) {
      background-color: #f9f9f9;
    }

    .responsive-table tbody tr:hover {
      background-color: #e0e0e0;
    }



    /* Adjust table cell padding for responsiveness */
    @media (max-width: 768px) {

      .responsive-table th,
      .responsive-table td {
        padding: 8px;
      }
    }
  </style>
</head>

<body>
  <!-- Sidebar -->
  <%- include('partials/navbar') %>
    <!-- Sidebar content -->

    <!-- <div id="searchContainer">
      <input type="text" id="searchInput" placeholder="Search...">
      <button id="searchButton"  class="btn btn-info">Search</button>
    </div> -->
    <div  id="searchContainer"  class="d-flex">
      <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search"  id="searchInput" style="width:25%">
      <button class="btn btn-outline-primary" type="submit"  id="searchButton">Search</button>
    </div>

    <!-- Main Content -->
    <div id="content" class="responsive-table-container">
      <table class="responsive-table">
        <thead>
          <tr>
            <th>S.No</th>
            <th>Member Name</th>
            <th>Download Date</th>
            <th>Address</th>
            <th>Action</th>
         




            <!-- Add more columns as needed -->
          </tr>

        </thead>
        <tbody id="tableBody">
          <!-- Table rows will be dynamically populated -->
        </tbody>
      </table>
    </div>
    <div id="pagination" class="pagination"></div>

    <script src="/js/script.js"></script>
  <script>
    


    document.addEventListener('DOMContentLoaded', () => {
    const pageSize = 10;
    let currentPage = 1;
    let data = [];

    fetch('/download/viewDownloadedMember')
        .then(response => response.json())
        .then(apiData => {
            console.log(apiData);
            if (!Array.isArray(apiData.result)) {
                throw new Error('API data is not in the expected format');
            }
            data = apiData.result;
            renderTable();
        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });

    function renderTable() {
        const startIndex = (currentPage - 1) * pageSize;
        const endIndex = startIndex + pageSize;
        const paginatedData = data.slice(startIndex, endIndex);
        const tableBody = document.getElementById('tableBody');
        tableBody.innerHTML = '';

        paginatedData.forEach((item, index) => {
            const row = `
                <tr>
                    <td>${startIndex + index + 1}</td>
                    <td>${item.name} <br> ${item.mobile} <br> ${item.email} </td>
                    <td>${item.download_date}</td>
                    <td>${item.address}</td>
                    <td><i class="fas fa-trash" data-downloadid="${item.id}"></i></td>
                </tr>
            `;
            tableBody.insertAdjacentHTML('beforeend', row);
        });

        renderPagination();
    }

    function renderPagination() {
        const totalPages = Math.ceil(data.length / pageSize);
        const paginationElement = document.getElementById('pagination');
        paginationElement.innerHTML = '';

        if (totalPages > 1) {
            const numPagesToShow = 3;
            let startPage = Math.max(1, currentPage - Math.floor(numPagesToShow / 2));
            let endPage = Math.min(totalPages, startPage + numPagesToShow - 1);

            if (endPage - startPage + 1 < numPagesToShow) {
                startPage = Math.max(1, endPage - numPagesToShow + 1);
            }

            if (currentPage > 1) {
                renderPaginationButton('«', currentPage - 1);
            }

            for (let i = startPage; i <= endPage; i++) {
                if (i === currentPage) {
                    renderPaginationButton(`<b>${i}</b>`, i);
                } else {
                    renderPaginationButton(i, i);
                }
            }

            if (currentPage < totalPages) {
                renderPaginationButton('»', currentPage + 1);
            }
        }
    }

    function renderPaginationButton(label, page) {
        const paginationElement = document.getElementById('pagination');
        const pageLink = document.createElement('a');
        pageLink.href = '#';
        pageLink.innerHTML = label;
        pageLink.addEventListener('click', () => {
            currentPage = page;
            renderTable();
        });
        paginationElement.appendChild(pageLink);
    }

    function handleSearch() {
        const searchInput = document.getElementById('searchInput').value.toLowerCase();
        const filteredData = data.filter(user => user.name.toLowerCase().includes(searchInput));
        renderFilteredTable(filteredData);
    }

    function renderFilteredTable(filteredData) {
        const tableBody = document.getElementById('tableBody');
        tableBody.innerHTML = '';
        const startIndex = (currentPage - 1) * pageSize;
        let overallIndex = startIndex;

        filteredData.forEach(item => {
            const row = `
                <tr>
                    <td>${overallIndex + 1}</td>
                    <td>${item.name} <br> ${item.mobile} <br> ${item.email} </td>
                    <td>${item.download_date}</td>
                    <td>${item.address}</td>
                    <td><i class="fas fa-trash" data-downloadid="${item.id}"></i></td>
                </tr>
            `;
            tableBody.insertAdjacentHTML('beforeend', row);
            overallIndex++;
        });
    }

    document.getElementById('searchButton').addEventListener('click', handleSearch);

    document.getElementById('tableBody').addEventListener('click', function(event) {
        if (event.target.classList.contains('fa-trash')) {
            const downloadid = event.target.getAttribute('data-downloadid');
            console.log(downloadid);
            const confirmation = confirm('Are you sure you want to delete this user?');
            if (confirmation) {
                fetch(`/download/deleteDownloadedAplication/${downloadid}`, {
                    method: 'DELETE',
                })
                .then(response => {
                    if (response.ok) {
                        event.target.closest('tr').remove();
                        data = data.filter(item => item.id != downloadid);
                        renderTable();
                    } else {
                        console.error('Failed to delete user');
                    }
                })
                .catch(error => {
                    console.error('Error deleting user:', error);
                });
            }
        }
    });
});

  </script>

</body>

</html>