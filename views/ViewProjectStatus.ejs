<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Responsive Table with Sidebar</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

 <style>
    /* Your provided CSS styles */
    /* ... */
    /* Add your table styles below */

    /* Responsive Table */
    .responsive-table-container {
      /* margin-top: 85px; */
       /* Adjust margin to clear the navbar */
      transition: margin-left 0.5s ease; /* Add transition for smooth adjustment */
      overflow-x: auto; /* Enable horizontal scrolling if needed */
      margin-left: 22rem;
      padding: 61px 20px 30px 0px;
    }

    .responsive-table {
      width: 100%;
      border-collapse: collapse;
      /* margin-top: 61px; */
      /* margin-left: 1px; */
      /* margin-bottom: 2rem; */
    }

    .responsive-table th,
    .responsive-table td {
      padding: 12px;
      border: 1px solid #ddd;
    }

    .responsive-table th {
      background-color: #f0f0f0;
      font-weight: bold;
      text-align: left;
    }

    .responsive-table tbody tr:nth-child(even) {
      background-color: #f9f9f9;
    }

    .responsive-table tbody tr:hover {
      background-color: #e0e0e0;
    }

    /* Adjust table cell padding for responsiveness */
    @media (max-width: 768px) {
      .responsive-table th,
      .responsive-table td {
        padding: 8px;
      }
    }
  </style>
</head>
<body>
  <!-- Sidebar -->
  <%- include('partials/navbar') %>
    <!-- Sidebar content -->
 

 <!-- Main Content -->
 <div  id="searchContainer"  class="d-flex">
    <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search"  id="searchInput" style="width:25%">
    <button class="btn btn-outline-primary" type="submit"  id="searchButton">Search</button>
  </div>
 
<div id="content" class="responsive-table-container" >
  <table class="responsive-table">
    <thead>
      <tr>
        <th>S.No</th>
        <th>Project Name</th>
        <th>Title</th>
        <th>Description</th>
        <th>Image/File</th>
        <th>Notified Via</th>
        <th>Updated Date</th>
        <th>Action</th>
      </tr>
      </tr>
    </thead>
    <tbody id="tableBody"></tbody>
  </table>
</div>
    <div id="pagination" class="pagination"></div>

    




    <script src="/js/script.js"></script>
    <script>
        const pageSize = 10; // Number of rows per page
        let currentPage = 1;
        let data = []; // Array to store all data
    
        document.addEventListener('DOMContentLoaded', () => {
            fetch('/project/viewProjectStatus')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(apiData => {
                    data = apiData; // Store fetched data
                    renderTable(); // Render initial table
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });
        });
    
        function renderTable() {
            const startIndex = (currentPage - 1) * pageSize;
            const endIndex = startIndex + pageSize;
            const paginatedData = data.slice(startIndex, endIndex);
            const tableBody = document.getElementById('tableBody');
            tableBody.innerHTML = '';
    
            paginatedData.forEach((item, index) => {
                const row = tableBody.insertRow();
                row.insertCell(0).textContent = startIndex + index + 1; // S.No
                row.insertCell(1).textContent = item['Project Name'];
                row.insertCell(2).textContent = item['Title'];
                row.insertCell(3).textContent = item['Description'];
                row.insertCell(4).textContent = item['File'];
                row.insertCell(5).textContent = item['Status Date'];
                row.insertCell(6).textContent = item['Notification'];
    
                const actionCell = row.insertCell(7);
                const deleteIcon = document.createElement('i');
                deleteIcon.className = 'bx bx-trash';
                deleteIcon.addEventListener('click', () => {
                    handleDelete(item.pro_status_pk);
                });
                actionCell.appendChild(deleteIcon);
                  // Edit icon
                    const editIcon = document.createElement('i');
                    editIcon.className = 'fas fa-edit'; // Font Awesome class for edit icon
                    editIcon.style.cursor = 'pointer';  // Set cursor to pointer to indicate it's clickable
                    editIcon.addEventListener('click', () => {
                        const editRoute = `https://adminpanel.defencehousingsociety.com/editProjectStatus/${item.pro_status_pk}`;  // Create a route based on the item's ID
                        window.location.href = editRoute;  // Redirect to the new route
                        // handleEdit(item.pro_status_pk);  // Call handleEdit function with the item's id
                    });
                     actionCell.appendChild(editIcon); 
            });
              
            renderPagination();
        }
    
        function renderPagination() {
            const totalPages = Math.ceil(data.length / pageSize);
            const paginationElement = document.getElementById('pagination');
            paginationElement.innerHTML = '';
    
            if (totalPages > 1) {
                const numPagesToShow = 5;
                let startPage = Math.max(1, currentPage - Math.floor(numPagesToShow / 2));
                let endPage = Math.min(totalPages, startPage + numPagesToShow - 1);
    
                if (endPage - startPage + 1 < numPagesToShow) {
                    startPage = Math.max(1, endPage - numPagesToShow + 1);
                }
    
                if (currentPage > 1) {
                    renderPaginationButton('«', currentPage - 1);
                }
    
                for (let i = startPage; i <= endPage; i++) {
                    if (i === currentPage) {
                        renderPaginationButton(`<b>${i}</b>`, i);
                    } else {
                        renderPaginationButton(i, i);
                    }
                }
    
                if (currentPage < totalPages) {
                    renderPaginationButton('»', currentPage + 1);
                }
            }
        }
    
        function renderPaginationButton(label, page) {
            const paginationElement = document.getElementById('pagination');
            const pageLink = document.createElement('a');
            pageLink.href = '#';
            pageLink.innerHTML = label;
            pageLink.addEventListener('click', () => {
                currentPage = page;
                renderTable();
            });
            paginationElement.appendChild(pageLink);
        }
    
        function handleDelete(id) {
    if (confirm('Are you sure you want to delete this record?')) {
        fetch(`/project/deleteProjectStatus/${id}`, {
            method: 'DELETE'
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(errorData => { throw new Error(errorData.message); });
            }
            return response.json();
        })
        .then(responseData => {
            alert(responseData.message);
            // Update the global data array by removing the deleted item
            data = data.filter(item => item.pro_status_pk !== id);
            renderTable();
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
            alert(`Error deleting record: ${error.message}`);
        });
    }
}

        function handleSearch() {
            const searchInput = document.getElementById('searchInput').value.trim().toLowerCase();
            const filteredData = data.filter(item => {
                return item['Project Name'].toLowerCase().includes(searchInput);
            });
            renderFilteredTable(filteredData);
        }
    
        function renderFilteredTable(filteredData) {
            const tableBody = document.getElementById('tableBody');
            tableBody.innerHTML = '';
            const startIndex = (currentPage - 1) * pageSize;
            let overallIndex = startIndex;
    
            filteredData.forEach(item => {
                const row = tableBody.insertRow();
                row.insertCell(0).textContent = overallIndex + 1; // S.No
                row.insertCell(1).textContent = item['Project Name'];
                row.insertCell(2).textContent = item['Title'];
                row.insertCell(3).textContent = item['Description'];
                row.insertCell(4).textContent = item['File'];
                row.insertCell(5).textContent = item['Status Date'];
                row.insertCell(6).textContent = item['Notification'];
                const actionCell = row.insertCell(7);
                
            const deleteIcon = document.createElement('i');
            deleteIcon.className = 'bx bx-trash';
            deleteIcon.addEventListener('click', () => {
                handleDelete(item.pro_status_pk);
            });
            actionCell.appendChild(deleteIcon);
            
                    // Create and append the edit icon dynamically
                    const editIcon = document.createElement('i');
                    editIcon.className = 'fas fa-edit'; // Font Awesome class for the edit icon
                    editIcon.style.cursor = 'pointer';  // Make the icon clickable
                    editIcon.addEventListener('click', () => {
                        const editRoute = `https://adminpanel.defencehousingsociety.com/editProjectStatus/editProjectStatus/${item.pro_status_pk}`;  // Create a route based on the item's ID
                        window.location.href = editRoute;  // Redirect to the new route

                        // handleEdit(item.pro_status_pk);  // Function to handle the edit action
                        // window.location.href = editRoute; 
                    });
                    actionCell.appendChild(editIcon); 
            tableBody.appendChild(row);
            overallIndex++;
            });
        }
    
        document.getElementById('searchButton').addEventListener('click', handleSearch);
    </script>
</body>

</html>