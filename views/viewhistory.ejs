<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Defence Housing Soceity </title>
  <link rel="icon" href="/img/logo200.png">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <!-- <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script> -->

  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css"
    integrity="sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4" crossorigin="anonymous" />
  <!-- Boxicons CSS -->
  <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.min.css" />
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">


  <style>
    /* Your provided CSS styles */
    /* ... */
    /* Add your table styles below */

    /* Responsive Table */
    .responsive-table-container {
      /* margin-top: 85px; */
      /* Adjust margin to clear the navbar */
      transition: margin-left 0.5s ease;
      /* Add transition for smooth adjustment */
      overflow-x: auto;
      /* Enable horizontal scrolling if needed */
      margin-left: 22rem;
      padding: 61px 20px 30px 0px;
    }

    .responsive-table {
      width: 100%;
      border-collapse: collapse;
      /* margin-top: 61px; */
      /* margin-left: 1px; */
      /* margin-bottom: 2rem; */
    }

    .responsive-table th,
    .responsive-table td {
      padding: 12px;
      border: 1px solid #ddd;
    }

    .responsive-table th {
      background-color: #f0f0f0;
      font-weight: bold;
      text-align: left;
    }

    .responsive-table tbody tr:nth-child(even) {
      background-color: #f9f9f9;
    }

    .responsive-table tbody tr:hover {
      background-color: #e0e0e0;
    }

    /* Adjust table cell padding for responsiveness */
    @media (max-width: 768px) {

      .responsive-table th,
      .responsive-table td {
        padding: 8px;
      }
    }

    .pagination {
      display: inline-block;
      margin-left: 67rem;
      margin-top: 1rem;
      background-color: white;
      border: 2px solid transparent;
      box-shadow: 1px 1px 2px 2px;
    }

    .pagination a {
      color: black;
      padding: 8px 16px;
      text-decoration: none;
    }

    .pagination a.active {
      background-color: #4CAF50;
      color: white;
    }
  </style>
</head>

<body>
  <!-- Sidebar -->
  <%- include('partials/navbar') %>
    <!-- Sidebar content -->



    <!-- Main Content -->
    <h1>hello</h1>
    <div id="content"  style="margin-top: 6rem;">
      <!-- Content Goes Here -->
      <!-- <span class="menu-text">Page Title</span> -->
      <form id="userDataForm">
        <div class="card">
          <h3 class="card-title">Customer Details</h3>
          <div class="form-row">
            <div class="form-group col-md-6">
              <label for="nameInput">Name:</label>
              <input type="text" id="nameInput" class="form-control" readonly>
            </div>
            <div class="form-group col-md-6">
              <label for="phoneInput">Phone:</label>
              <input type="text" id="phoneInput" class="form-control" readonly>
            </div>

            <div class="form-group col-md-6">
              <label for="emailInput">Email:</label>
              <input type="text" id="emailInput" class="form-control" readonly>
            </div>

            <div class="form-group col-md-6">
              <label for="projectInput">Project Name:</label>
              <input type="text" id="projectInput" class="form-control" readonly>
            </div>

            <div class="form-group col-md-6">
              <label for="seniorInput">Seniority ID:</label>
              <input type="text" id="seniorInput" class="form-control" readonly>
            </div>

            <div class="form-group col-md-6">
              <label for="plotInput">Plot Size:</label>
              <input type="text" id="plotInput" class="form-control" readonly>
            </div>



          </div>
        </div>
      </form>

      <div class="form-group col-md-6">
        <button class="btn btn-primary" id="addReceiptBtn" style="margin-left: 43rem;">Add Receipt</button>
      </div>
    </div>

    <br>
    <div id="content" class="responsive-table-container">

      <table class="responsive-table">
        <thead>
          <tr>
            <th>S.No</th>
            <th>Payment Type</th>
            <th>Payment For</th>
            <th>Payment Mode</th>
            <th>Bank</th>
            <th>Cheque No/Transcation ID/ DD No</th>
            <th> Amount</th>
            <th>Date</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody id="tableBody"></tbody>

      </table>
    </div>

    <div id="pagination" class="pagination"></div>

    <script src="/js/script.js"></script>
    <script>
      // Get the userId from the URL query parameter
      const urlParams = new URLSearchParams(window.location.search);
      const userId = urlParams.get('userId');
      console.log("userId", userId);
      const pageSize = 5; // Number of rows per page
      let currentPage = 1;
      // userData = [];
      // data=[];

      // Attach a click event listener to the "Add Receipt" button
      // const addReceiptBtn = document.getElementById('addReceiptBtn');
      // addReceiptBtn.addEventListener('click', () => {
      //     // Get the userId from the URL query parameter
      //     const urlParams = new URLSearchParams(window.location.search);
      //     const userId = urlParams.get('userId');

      //     // Redirect to the newreceipt page with the userId query parameter
      //     window.location.href = `/newreceipt?userId=${userId}`;
      // });

      const addReceiptBtn = document.getElementById('addReceiptBtn');
      addReceiptBtn.addEventListener('click', () => {
        // Get the userId from the URL query parameter
        const urlParams = new URLSearchParams(window.location.search);
        const userId = urlParams.get('userId');

        // Make a fetch request to get the th_user_pk based on the userId
        fetch(`/users/getThUserPk?userId=${userId}`)
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(data => {
            const thUserPk = data.th_user_pk;

            // Redirect to the newreceipt page with both userId and th_user_pk query parameters
            window.location.href = `/newreceipt?userId=${userId}&thUserPk=${thUserPk}`;
          })
          .catch(error => {
            console.error('Error fetching th_user_pk:', error);
            alert('An error occurred while fetching th_user_pk. Please try again later.');
          });
      });




      // Fetch user data from the /viewmembers/:userId endpoint

      function renderTable(userData) {

        const startIndex = (currentPage - 1) * pageSize;
        const endIndex = startIndex + pageSize;
        const paginatedData = userData.slice(startIndex, endIndex);




        // Populate the table with payment data
        const tableBody = document.getElementById('tableBody');
        tableBody.innerHTML = ''; // Clear existing rows

        paginatedData.forEach((payment, index) => {
          const row = tableBody.insertRow();
          const serialNumberCell = row.insertCell(0);
          const paymentTypeCell = row.insertCell(1);
          const paymentForCell = row.insertCell(2);
          const paymentModeCell = row.insertCell(3);
          const bankCell = row.insertCell(4);
          const detailsCell = row.insertCell(5);
          const amountCell = row.insertCell(6);
          const dateCell = row.insertCell(7);
          const actionCell = row.insertCell(8);

          serialNumberCell.textContent = startIndex + index + 1;
          paymentTypeCell.textContent = payment.payment_type;
          paymentForCell.textContent = payment.pro_name;
          paymentModeCell.textContent = payment.payment_mode;
          bankCell.textContent = payment.bank_name;

          console.log(paymentForCell.textContent)
          // dateCell.textContent = payment.created_date;

          // Populate the Cheque No/Transaction ID/DD No cell based on availability
          // if (payment.cheque_no) {
          //   detailsCell.textContent = payment.cheque_no;
          // } else if (payment.transaction_id) {
          //   detailsCell.textContent = payment.transaction_id;
          // } else if (payment.dd_no) {
          //   detailsCell.textContent = payment.dd_no;
          // } else {
          //   detailsCell.textContent = 'N/A';
          // }

           // Use the new cheque_dd_transaction_id column
    detailsCell.textContent = payment.cheque_dd_transaction_id || 'N/A';


          // amountCell.textContent = payment.payment_amnt;
          const formattedAmount = formatNumber(payment.payment_amnt); // Format the amount
          amountCell.textContent = `${formattedAmount}/-`; // Set the formatted amount
          
              const date = payment.created_date ? new Date(payment.created_date) : null;

                if (date) {
                    const day = date.getDate().toString().padStart(2, '0'); // Day with leading zero
                    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Month with leading zero (0-based, hence +1)
                    const year = date.getFullYear(); // Year

                    dateCell.textContent = `${day}-${month}-${year}`; // Format as day-month-year
                } else {
                    dateCell.textContent = 'N/A'; // Default to 'N/A' if date is invalid
                    }

        //   const date = (payment.created_date && payment.created_date.split('T')[0]) || 'N/A';
        //   dateCell.textContent = date;
          // const date = payment.created_date.split('T')[0];
          // const date = payment.created_date.substring(0, 10); // Extract first 10 characters

          // Set the content of the dateCell
          // dateCell.textContent = date;
          // Action icons
          const viewIcon = document.createElement('i');
          viewIcon.className = 'fas fa-eye';
          const viewLink = document.createElement('a');
          viewLink.href = '#'; // Replace '#' with your view URL or function
          viewLink.title = 'View';
          viewLink.appendChild(viewIcon);
          actionCell.appendChild(viewLink);

          viewLink.addEventListener('click', async (event) => {
            event.preventDefault(); // Prevent default link behavior

            try {
              console.log("click")
              // Fetch receipt IDs from the backend API
              const response = await fetch(`/users/viewmembers/${userId}`);
              const userData = await response.json();
              console.log("userData inside the action", userData);

              // Check if userData is an array and is not empty
              if (Array.isArray(userData) && userData.length > 0) {
                // Get the receiptId of the clicked payment
                const receiptId = payment.receipt_pk; // Assuming receipt_pk is the field containing the receipt ID
                console.log("receiptId", receiptId);

                // Redirect to the /rec page with the receiptId as a URL parameter
                window.location.href = `/rec?receiptId=${receiptId}`;
              } else {
                console.error('User data is not in the expected format or is empty:', userData);
              }
            } catch (error) {
              console.error('Error fetching receipt IDs:', error);
              // Handle error
            }
          });

          // Add event listener to the viewLink

          // const editIcon = document.createElement('i');
          // editIcon.className = 'fas fa-edit';
          // const editLink = document.createElement('a');
          // editLink.href = '#'; // Replace '#' with your edit URL or function
          // editLink.title = 'Edit';
          // editLink.appendChild(editIcon);
          // actionCell.appendChild(editLink);

          // editLink.addEventListener('click', async (event) => {
          //   event.preventDefault(); // Prevent default link behavior

          //   try {
          //     // Fetch receipt IDs from the backend API
          //     const response = await fetch(`/users/viewmembers/${userId}`);
          //     const userData = await response.json();
          //     console.log("userData inside the action", userData);

          //     // Check if userData is an array and is not empty
          //     if (Array.isArray(userData) && userData.length > 0) {
          //       // Get the receiptId of the clicked payment
          //       const receiptId = payment.receipt_pk; // Assuming receipt_pk is the field containing the receipt ID
          //       console.log("receiptId", receiptId);

          //       // Redirect to the /rec page with the receiptId as a URL parameter
          //       window.location.href = `/editrec?receiptId=${receiptId}`;
          //     } else {
          //       console.error('User data is not in the expected format or is empty:', userData);
          //     }
          //   } catch (error) {
          //     console.error('Error fetching receipt IDs:', error);
          //     // Handle error
          //   }
          // });

          // Inside your forEach loop where you create rows for payment history entries
          const deleteIcon = document.createElement('i');
          deleteIcon.className = 'fas fa-trash-alt';
          const deleteLink = document.createElement('a');
          deleteLink.href = '#'; // Replace '#' with your delete URL or function
          deleteLink.title = 'Delete';
          deleteLink.appendChild(deleteIcon);
          actionCell.appendChild(deleteLink);

          deleteLink.addEventListener('click', async (event) => {
            event.preventDefault(); // Prevent default link behavior

            // Extract the receipt ID associated with the clicked row
            const receiptId = payment.receipt_pk; // Assuming 'receipt_pk' is the property containing the receipt ID
            console.log("receiptId", receiptId);

            // Show confirmation dialog
            const confirmation = confirm('Are you sure you want to delete this payment history?');

            if (confirmation) {
              try {
                // Send a DELETE request to the backend API to delete the receipt entry
                const response = await fetch(`/users/deletePaymentHistory/${receiptId}`, {
                  method: 'DELETE',
                });

                if (response.ok) {
                  // Remove the row from the table if deletion was successful
                  row.remove();
                } else {
                  console.error('Failed to delete payment history');
                }
              } catch (error) {
                console.error('Error deleting payment history:', error);
                // Handle error
              }
            }
          });

          // const sendMailLink = document.createElement('a');
          // sendMailLink.setAttribute('href', `mailto:${userData[0].user_email}`);
          // sendMailLink.setAttribute('title', 'Send Email');
          // sendMailLink.innerHTML = '<i class="fas fa-envelope"></i>'; // Assuming you have Font Awesome included
          // actionCell.appendChild(sendMailLink);

        });

        renderPagination(userData);


      }



      // Function to render pagination controls
      function renderPagination(userData) {
    const totalRows = userData.length;
    const totalPages = Math.ceil(totalRows / pageSize);
    const paginationElement = document.getElementById('pagination');
    
    // Check if totalRows exceeds the threshold (5)
    if (totalRows > pageSize) {
        paginationElement.innerHTML = ''; // Clear existing pagination controls

        // Render previous button
        if (currentPage > 1) {
            renderPaginationButton('«', currentPage - 1, userData);
        }

        // Render page numbers
        for (let i = 1; i <= totalPages; i++) {
            if (i === currentPage) {
                renderPaginationButton(`<b>${i}</b>`, i, userData);
            } else {
                renderPaginationButton(i, i, userData);
            }
        }

        // Render next button
        if (currentPage < totalPages) {
            renderPaginationButton('»', currentPage + 1, userData);
        }
    } else {
        paginationElement.innerHTML = ''; // Clear pagination controls if not needed
    }
}

      // Function to render a pagination button
      function renderPaginationButton(label, page, userData) {
        const paginationElement = document.getElementById('pagination');
        const pageLink = document.createElement('a');
        pageLink.href = '#';
        pageLink.innerHTML = label;
        pageLink.addEventListener('click', () => {
          currentPage = page;
          renderTable(userData)
          // console.log("userData In renderpaginationButton ",userData)
        });
        paginationElement.appendChild(pageLink);
      }

      
      
      document.addEventListener('DOMContentLoaded', () => {

        fetch(`/users/viewmembers/${userId}`)
          .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response.json();
          })
          .then(userData => { 
            // Keep using `userData` here
            renderTable(userData); // Pass `userData` to the renderTable function
            renderPagination(userData); // Render initial pagination controls

            // Use the fetched user data to populate the view
            console.log("userData start", userData);

            // Check if user data is an array and not empty
            if (Array.isArray(userData) && userData.length > 0) {
              // Populate input fields with user data
              const nameInput = document.getElementById('nameInput');
              nameInput.value = userData[0].username;

              const phoneInput = document.getElementById('phoneInput');
              phoneInput.value = userData[0].user_mobile;

              const emailInput = document.getElementById('emailInput');
              emailInput.value = userData[0].user_email;

              const projectInput = document.getElementById('projectInput');
              projectInput.value = userData[0].pro_name;

              const seniorInput = document.getElementById('seniorInput');
              seniorInput.value = userData[0].senior_id;

              const plotInput = document.getElementById('plotInput');
              plotInput.value = userData[0].prop_dimension;


              // Populate the table with payment data
              // This part seems to be already handled inside the `renderTable()` function
            } else {
              console.error('User data is not in the expected format:', userData);
            }
          })
          .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
          });
      });

      const formatNumber = (number) => {
    const formatter = new Intl.NumberFormat('en-IN');
    return formatter.format(number);
};



    </script>


</body>

</html>